# Project: Web
# Path: .github/workflows/ci.yaml
# Description: Continuous Integration workflow for Web

name: Continuous Integration

on:
  pull_request:
    branches: [main]

env:
  ENVIRONMENT: staging
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  SHA: ${{ github.sha }}
  WEB_PORT: 3000
  NAMESPACE_CHART_VERSION: 0.1.0
  DEPLOYMENT_CHART_VERSION: 0.1.0

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    env:
      DOMAIN: staging.m-oo-r.com
      KRATOS_SERVICE_URL: ${{ secrets.KRATOS_SERVICE_URL }}
      KRATOS_SERVICE_ADMIN_URL: ${{ secrets.KRATOS_SERVICE_ADMIN_URL }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install envsubst
        run: sudo apt-get install -y gettext-base
      
      - name: Process Dockerfile
        run: |
          envsubst < Dockerfile > Dockerfile_processed
          mv Dockerfile_processed Dockerfile

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Build image
        uses: docker/build-push-action@v6
        with:
          context: ./
          push: false
          load: true
          tags: web:pr

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.26.0
        continue-on-error: true
        with:
          image-ref: 'web:pr'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  deploy-dry-run:
    needs: build-and-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
  
      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ secrets.CLUSTER_NAME }}
          location: ${{ secrets.REGION }}

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          project_id: ${{ secrets.PROJECT_ID }}

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials ${{ secrets.CLUSTER_NAME }} --region ${{ secrets.REGION }} --project ${PROJECT_ID}

      - name: Install envsubst
        run: sudo apt-get install -y gettext-base

      - name: Update Values configuration
        run: |
          envsubst < values.yml > values_processed.yml
          mv values_processed.yml values.yml

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker gcr.io --quiet

      - name: Pull and Export Namespace Helm Chart from GCR
        run: |
          # Pull the chart from GCR
          helm pull oci://gcr.io/${{ secrets.PROJECT_ID }}/charts/namespace --version ${NAMESPACE_CHART_VERSION} --untar --untardir ./charts

      - name: Deploy Namespace with Helm (Dry Run)
        run: |
          set -eo pipefail
          helm upgrade --install --dry-run --debug web-staging-namespace ./charts/namespace \
            -f values.yml \
            --version ${NAMESPACE_CHART_VERSION} > helm-namespace-dry-run-output.txt 2>&1 || true
          if grep -q "Error:" helm-namespace-dry-run-output.txt; then
            echo "Helm dry-run encountered errors:"
            cat helm-namespace-dry-run-output.txt
            exit 1
          else
            echo "Helm dry-run completed successfully. Output:"
            cat helm-namespace-dry-run-output.txt
          fi

      - name: Pull and Export Deployment Helm Chart from GCR
        run: |
          # Pull the chart from GCR
          helm pull oci://gcr.io/${{ secrets.PROJECT_ID }}/charts/deployment --version ${DEPLOYMENT_CHART_VERSION} --untar --untardir ./charts

      - name: Deploy Deployment with Helm (Dry Run)
        run: |
          set -eo pipefail
          helm upgrade --install --dry-run --debug web-staging ./charts/deployment \
            -n web-${ENVIRONMENT} \
            -f values.yml \
            --version ${DEPLOYMENT_CHART_VERSION} > helm-deployment-dry-run-output.txt 2>&1 || true
          if grep -q "Error:" helm-deployment-dry-run-output.txt; then
            echo "Helm dry-run encountered errors:"
            cat helm-deployment-dry-run-output.txt
            exit 1
          else
            echo "Helm dry-run completed successfully. Output:"
            cat helm-deployment-dry-run-output.txt
          fi
